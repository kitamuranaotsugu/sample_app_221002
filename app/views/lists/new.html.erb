<h1>新規投稿</h1>
<% if @list.errors.any? %>
  <%= @list.errors.count %>件のエラーが発生しました
<!--errorsメソッドにより、モデルにかけたバリデーションを元に生じたエラーの中身を確認出来るようになります。ターミナル上ではvalidatesメソッドによってrollback（登録失敗）が表示されるが、なぜ失敗かは明示されない-->
<!--errorsメソッドに更にany?メソッドによりbinding.pryを記述して確認するとtrueが帰ってくる。-->
  <ul>
    <% @list.errors.full_messages.each do |message| %>
<!--errorが起こっていることは分かるが、具体的なエラー内容をユーザーに知らせるためにはスクリプトレット（＝付き）でerror.full_messagesメソッドを用いる必要がある。eachメソッドで各カラムのメッセージを表示させる-->
      <li><%= message %></li>
    <% end %>
  </ul>
<% end %>

<%= form_with model: @list do |f| %>
<!--フォームを作ります。利用するモデルのインスタンス変数を記述し、どのモデルにデータを渡すか（引数）を決めることが出来ます。インスタンスが空かどうかで利用するメソッドを自動で選定します。今回は空なのでpostです。-->
<!--このフォーム内でのみ使える変数としてブロック変数（バーディカルバー、縦棒で囲んだ部分）にf（form)を指定します。さらに、フォームを送るurlの指定やメソッドの指定も可能（ただし、form_withが賢いのであまり使わない？）-->

  <h4>タイトル</h4>
  <%= f.text_field :title %>

  <h4>本文</h4>
  <%= f.text_area :body %>

  <h4>画像</h4>
  <%= f.file_field :image, accept: "image/*" %>

  <%= f.submit '投稿' %>
<!--text_fieldメソッドにより1行のフォームを表示させ、そこに入力した内容は後にtitleカラム、bodyカラムに格納されます。submitメソッドは送信用のボタンを作成してくれます。-->
<% end %>